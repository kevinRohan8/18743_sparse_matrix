-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of sparse_mat is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sparse_mat,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.632875,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=366,HLS_SYN_LUT=656,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_123 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100100011";
    constant ap_const_lv64_124 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100100100";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_124 : STD_LOGIC_VECTOR (8 downto 0) := "100100100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv12_8A0 : STD_LOGIC_VECTOR (11 downto 0) := "100010100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv32_8A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100010100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal col_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_ce0 : STD_LOGIC;
    signal col_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal row_ce0 : STD_LOGIC;
    signal row_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal val_r_ce0 : STD_LOGIC;
    signal val_r_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_262 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_1_fu_272_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_5_fu_300_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_5_reg_509 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_354_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_4_reg_525 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_4_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_addr_1_reg_583 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal val_load_1_reg_588 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_5_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_3_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_addr_reg_621 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal val_load_reg_626 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ptr_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ptr_ce0 : STD_LOGIC;
    signal ptr_we0 : STD_LOGIC;
    signal ptr_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ptr_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ptr_ce1 : STD_LOGIC;
    signal ptr_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_we0 : STD_LOGIC;
    signal B_d0 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_203 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_214 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_3_reg_227 : STD_LOGIC_VECTOR (11 downto 0);
    signal m1_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal k2_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_1_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_cast_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_327_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd15_cast_fu_375_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_379_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_411_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_418_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_461_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_468_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_cast_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component sparse_mat_col IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component sparse_mat_row IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component sparse_mat_val_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sparse_mat_ptr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component sparse_mat_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sparse_mat_B IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (8 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    col_U : component sparse_mat_col
    generic map (
        DataWidth => 9,
        AddressRange => 2208,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_address0,
        ce0 => col_ce0,
        q0 => col_q0);

    row_U : component sparse_mat_row
    generic map (
        DataWidth => 9,
        AddressRange => 2208,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_address0,
        ce0 => row_ce0,
        q0 => row_q0);

    val_r_U : component sparse_mat_val_r
    generic map (
        DataWidth => 1,
        AddressRange => 2208,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => val_r_address0,
        ce0 => val_r_ce0,
        q0 => val_r_q0);

    ptr_U : component sparse_mat_ptr
    generic map (
        DataWidth => 12,
        AddressRange => 293,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ptr_address0,
        ce0 => ptr_ce0,
        we0 => ptr_we0,
        d0 => i_2_reg_214,
        q0 => ptr_q0,
        address1 => ptr_address1,
        ce1 => ptr_ce1,
        q1 => ptr_q1);

    result_U : component sparse_mat_result
    generic map (
        DataWidth => 32,
        AddressRange => 293,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0);

    B_U : component sparse_mat_B
    generic map (
        DataWidth => 9,
        AddressRange => 293,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_address0,
        ce0 => B_ce0,
        we0 => B_we0,
        d0 => B_d0,
        q0 => B_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_2_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_2_reg_214 <= i_5_reg_509;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_266_p2 = ap_const_lv1_1))) then 
                i_2_reg_214 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    i_3_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_3_reg_227 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_4_fu_389_p2 = ap_const_lv1_1))) then 
                i_3_reg_227 <= i_4_reg_525;
            end if; 
        end if;
    end process;

    i_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_203 <= ap_const_lv9_0;
            elsif (((exitcond3_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_203 <= i_1_fu_272_p2;
            end if; 
        end if;
    end process;

    index_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                                index_fu_60(8 downto 0) <= index_2_cast_fu_314_p1(8 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_266_p2 = ap_const_lv1_1))) then 
                index_fu_60(0) <= '0';
                index_fu_60(1) <= '0';
                index_fu_60(2) <= '0';
                index_fu_60(3) <= '0';
                index_fu_60(4) <= '0';
                index_fu_60(5) <= '0';
                index_fu_60(6) <= '0';
                index_fu_60(7) <= '0';
                index_fu_60(8) <= '0';
            end if; 
        end if;
    end process;

    j_1_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_1_fu_56 <= j_fu_332_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_266_p2 = ap_const_lv1_1))) then 
                j_1_fu_56 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k2_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                k2_reg_247 <= k_1_reg_616;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k2_reg_247 <= j_5_fu_434_p1;
            end if; 
        end if;
    end process;

    m1_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                m1_reg_238 <= m_1_reg_578;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m1_reg_238 <= j_4_fu_371_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_4_reg_525 <= i_4_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_5_reg_509 <= i_5_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_3_fu_438_p2 = ap_const_lv1_1))) then
                k_1_reg_616 <= k_1_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                m_1_reg_578 <= m_1_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_262 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                result_addr_1_reg_583 <= tmp_16_fu_406_p1(9 - 1 downto 0);
                val_load_1_reg_588 <= val_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                result_addr_reg_621 <= tmp_11_fu_456_p1(9 - 1 downto 0);
                val_load_reg_626 <= val_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_13_reg_631 <= tmp_13_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_18_reg_593 <= tmp_18_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_2_cast_reg_560 <= tmp_2_cast_fu_385_p1;
            end if;
        end if;
    end process;
    index_fu_60(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond1_fu_294_p2, ap_CS_fsm_state5, exitcond_fu_348_p2, ap_CS_fsm_state7, tmp_4_fu_389_p2, ap_CS_fsm_state12, tmp_3_fu_438_p2, exitcond3_fu_266_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_266_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_4_fu_389_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((tmp_3_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    B_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, exitcond_fu_348_p2, tmp_1_fu_279_p1, tmp_6_fu_360_p1)
    begin
        if (((exitcond_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            B_address0 <= ap_const_lv64_124(9 - 1 downto 0);
        elsif (((exitcond_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            B_address0 <= tmp_6_fu_360_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_address0 <= tmp_1_fu_279_p1(9 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, exitcond_fu_348_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((exitcond_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((exitcond_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_d0 <= std_logic_vector(unsigned(i_reg_203) + unsigned(ap_const_lv9_1));

    B_we0_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_266_p2)
    begin
        if (((exitcond3_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state12, tmp_3_fu_438_p2)
    begin
        if (((tmp_3_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, tmp_3_fu_438_p2)
    begin
        if (((tmp_3_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_address0 <= tmp_8_fu_306_p1(12 - 1 downto 0);

    col_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            col_ce0 <= ap_const_logic_1;
        else 
            col_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_294_p2 <= "1" when (i_2_reg_214 = ap_const_lv12_8A0) else "0";
    exitcond3_fu_266_p2 <= "1" when (i_reg_203 = ap_const_lv9_124) else "0";
    exitcond_fu_348_p2 <= "1" when (i_3_reg_227 = ap_const_lv12_8A0) else "0";
    extLd15_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_q1),13));
    grp_fu_256_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(row_q0));
    i_1_fu_272_p2 <= std_logic_vector(unsigned(i_reg_203) + unsigned(ap_const_lv9_1));
    i_4_fu_354_p2 <= std_logic_vector(unsigned(i_3_reg_227) + unsigned(ap_const_lv12_1));
    i_5_fu_300_p2 <= std_logic_vector(unsigned(i_2_reg_214) + unsigned(ap_const_lv12_1));
    index_2_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_q0),32));
    j_4_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_q0),32));
    j_5_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_q0),32));
    j_fu_332_p0 <= j_1_fu_56;
    j_fu_332_p2 <= std_logic_vector(signed(j_fu_332_p0) + signed(ap_const_lv32_1));
    k_1_fu_450_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k2_reg_247));
    m_1_fu_400_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(m1_reg_238));

    ptr_address0_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_348_p2, ap_CS_fsm_state4, tmp_s_fu_327_p1, tmp_6_fu_360_p1)
    begin
        if (((exitcond_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ptr_address0 <= ap_const_lv64_123(9 - 1 downto 0);
        elsif (((exitcond_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ptr_address0 <= tmp_6_fu_360_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ptr_address0 <= tmp_s_fu_327_p1(9 - 1 downto 0);
        else 
            ptr_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    ptr_address1 <= tmp_7_fu_366_p1(9 - 1 downto 0);

    ptr_ce0_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_348_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((exitcond_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            ptr_ce0 <= ap_const_logic_1;
        else 
            ptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ptr_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ptr_ce1 <= ap_const_logic_1;
        else 
            ptr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ptr_we0_assign_proc : process(ap_CS_fsm_state4, tmp_9_fu_318_p2)
    begin
        if (((tmp_9_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ptr_we0 <= ap_const_logic_1;
        else 
            ptr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_address0_assign_proc : process(result_addr_1_reg_583, ap_CS_fsm_state8, result_addr_reg_621, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state15, tmp_16_fu_406_p1, tmp_11_fu_456_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            result_address0 <= result_addr_reg_621;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            result_address0 <= tmp_11_fu_456_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            result_address0 <= result_addr_1_reg_583;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_address0 <= tmp_16_fu_406_p1(9 - 1 downto 0);
        else 
            result_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_d0_assign_proc : process(tmp_18_reg_593, tmp_13_reg_631, ap_CS_fsm_state10, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            result_d0 <= tmp_13_reg_631;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            result_d0 <= tmp_18_reg_593;
        else 
            result_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, tmp_14_fu_394_p1, tmp_5_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            row_address0 <= tmp_5_fu_444_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            row_address0 <= tmp_14_fu_394_p1(12 - 1 downto 0);
        else 
            row_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    row_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            row_ce0 <= ap_const_logic_1;
        else 
            row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_256_p2),64));
    tmp_12_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_468_p2),32));
    tmp_12_fu_468_p2 <= (tmp_fu_461_p3 and reg_262);
    tmp_13_fu_478_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_474_p1) + unsigned(result_q0));
        tmp_14_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m1_reg_238),64));

    tmp_16_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_256_p2),64));
    tmp_17_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_418_p2),32));
    tmp_17_fu_418_p2 <= (tmp_19_fu_411_p3 and reg_262);
    tmp_18_fu_428_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_424_p1) + unsigned(result_q0));
    tmp_19_fu_411_p3 <= 
        ap_const_lv9_1FF when (val_load_1_reg_588(0) = '1') else 
        ap_const_lv9_0;
    tmp_1_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_203),64));
        tmp_2_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_379_p2),32));

    tmp_2_fu_379_p2 <= std_logic_vector(unsigned(extLd15_cast_fu_375_p1) + unsigned(ap_const_lv13_1FFF));
    tmp_3_fu_438_p2 <= "1" when (signed(k2_reg_247) < signed(ap_const_lv32_8A0)) else "0";
    tmp_4_fu_389_p2 <= "1" when (signed(m1_reg_238) > signed(tmp_2_cast_reg_560)) else "0";
        tmp_5_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k2_reg_247),64));

    tmp_6_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_227),64));
    tmp_7_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_354_p2),64));
    tmp_8_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_214),64));
    tmp_9_fu_318_p2 <= "1" when (index_fu_60 = index_2_cast_fu_314_p1) else "0";
    tmp_fu_461_p3 <= 
        ap_const_lv9_1FF when (val_load_reg_626(0) = '1') else 
        ap_const_lv9_0;
    tmp_s_fu_327_p0 <= j_1_fu_56;
        tmp_s_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_327_p0),64));


    val_r_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, tmp_14_fu_394_p1, tmp_5_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            val_r_address0 <= tmp_5_fu_444_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            val_r_address0 <= tmp_14_fu_394_p1(12 - 1 downto 0);
        else 
            val_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    val_r_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            val_r_ce0 <= ap_const_logic_1;
        else 
            val_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
