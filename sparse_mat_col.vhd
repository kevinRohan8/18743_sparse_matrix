-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity sparse_mat_col_rom is 
    generic(
             DWIDTH     : integer := 9; 
             AWIDTH     : integer := 12; 
             MEM_SIZE    : integer := 2208
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of sparse_mat_col_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 3=> "000000001", 4 to 8=> "000000010", 9 to 13=> "000000011", 14 to 20=> "000000100", 
    21 to 27=> "000000101", 28 to 33=> "000000110", 34 to 40=> "000000111", 41 to 45=> "000001000", 
    46 to 53=> "000001001", 54 to 60=> "000001010", 61 to 66=> "000001011", 67 to 76=> "000001100", 
    77 to 83=> "000001101", 84 to 88=> "000001110", 89 to 98=> "000001111", 99 to 105=> "000010000", 
    106 to 112=> "000010001", 113 to 120=> "000010010", 121 to 130=> "000010011", 131 to 137=> "000010100", 
    138 to 148=> "000010101", 149 to 153=> "000010110", 154 to 161=> "000010111", 162 to 170=> "000011000", 
    171 to 177=> "000011001", 178 to 186=> "000011010", 187 to 194=> "000011011", 195 to 203=> "000011100", 
    204 to 212=> "000011101", 213 to 221=> "000011110", 222 to 229=> "000011111", 230 to 234=> "000100000", 
    235 to 242=> "000100001", 243 to 252=> "000100010", 253 to 261=> "000100011", 262 to 266=> "000100100", 
    267 to 271=> "000100101", 272 to 278=> "000100110", 279 to 286=> "000100111", 287 to 291=> "000101000", 
    292 to 299=> "000101001", 300 to 305=> "000101010", 306 to 312=> "000101011", 313 to 321=> "000101100", 
    322 to 329=> "000101101", 330 to 336=> "000101110", 337 to 345=> "000101111", 346 to 354=> "000110000", 
    355 to 362=> "000110001", 363 to 371=> "000110010", 372 to 378=> "000110011", 379 to 389=> "000110100", 
    390 to 394=> "000110101", 395 to 402=> "000110110", 403 to 412=> "000110111", 413 to 419=> "000111000", 
    420 to 427=> "000111001", 428 to 435=> "000111010", 436 to 439=> "000111011", 440 to 446=> "000111100", 
    447 to 455=> "000111101", 456 to 464=> "000111110", 465 to 471=> "000111111", 472 to 481=> "001000000", 
    482 to 487=> "001000001", 488 to 498=> "001000010", 499 to 504=> "001000011", 505 to 513=> "001000100", 
    514 to 523=> "001000101", 524 to 530=> "001000110", 531 to 538=> "001000111", 539 to 547=> "001001000", 
    548 to 554=> "001001001", 555 to 561=> "001001010", 562 to 568=> "001001011", 569 to 575=> "001001100", 
    576 to 582=> "001001101", 583 to 586=> "001001110", 587 to 592=> "001001111", 593 to 596=> "001010000", 
    597 to 601=> "001010001", 602 to 607=> "001010010", 608 to 614=> "001010011", 615 to 624=> "001010100", 
    625 to 634=> "001010101", 635 to 644=> "001010110", 645 to 652=> "001010111", 653 to 662=> "001011000", 
    663 to 669=> "001011001", 670 to 678=> "001011010", 679 to 684=> "001011011", 685 to 694=> "001011100", 
    695 to 702=> "001011101", 703 to 709=> "001011110", 710 to 717=> "001011111", 718 to 725=> "001100000", 
    726 to 732=> "001100001", 733 to 737=> "001100010", 738 to 745=> "001100011", 746 to 752=> "001100100", 
    753 to 759=> "001100101", 760 to 765=> "001100110", 766 to 774=> "001100111", 775 to 781=> "001101000", 
    782 to 790=> "001101001", 791 to 798=> "001101010", 799 to 809=> "001101011", 810 to 816=> "001101100", 
    817 to 825=> "001101101", 826 to 831=> "001101110", 832 to 840=> "001101111", 841 to 848=> "001110000", 
    849 to 856=> "001110001", 857 to 869=> "001110010", 870 to 877=> "001110011", 878 to 883=> "001110100", 
    884 to 891=> "001110101", 892 to 898=> "001110110", 899 to 906=> "001110111", 907 to 913=> "001111000", 
    914 to 921=> "001111001", 922 to 926=> "001111010", 927 to 933=> "001111011", 934 to 941=> "001111100", 
    942 to 949=> "001111101", 950 to 958=> "001111110", 959 to 968=> "001111111", 969 to 976=> "010000000", 
    977 to 983=> "010000001", 984 to 991=> "010000010", 992 to 997=> "010000011", 998 to 1004=> "010000100", 
    1005 to 1014=> "010000101", 1015 to 1021=> "010000110", 1022 to 1030=> "010000111", 1031 to 1036=> "010001000", 
    1037 to 1046=> "010001001", 1047 to 1053=> "010001010", 1054 to 1061=> "010001011", 1062 to 1065=> "010001100", 
    1066 to 1073=> "010001101", 1074 to 1082=> "010001110", 1083 to 1092=> "010001111", 1093 to 1101=> "010010000", 
    1102 to 1108=> "010010001", 1109 to 1120=> "010010010", 1121 to 1131=> "010010011", 1132 to 1141=> "010010100", 
    1142 to 1148=> "010010101", 1149 to 1155=> "010010110", 1156 to 1163=> "010010111", 1164 to 1170=> "010011000", 
    1171 to 1178=> "010011001", 1179 to 1189=> "010011010", 1190 to 1194=> "010011011", 1195 to 1201=> "010011100", 
    1202 to 1207=> "010011101", 1208 to 1212=> "010011110", 1213 to 1216=> "010011111", 1217 to 1222=> "010100000", 
    1223 to 1229=> "010100001", 1230 to 1242=> "010100010", 1243 to 1249=> "010100011", 1250 to 1255=> "010100100", 
    1256 to 1269=> "010100101", 1270 to 1278=> "010100110", 1279 to 1287=> "010100111", 1288 to 1294=> "010101000", 
    1295 to 1301=> "010101001", 1302 to 1309=> "010101010", 1310 to 1315=> "010101011", 1316 to 1324=> "010101100", 
    1325 to 1331=> "010101101", 1332 to 1338=> "010101110", 1339 to 1345=> "010101111", 1346 to 1350=> "010110000", 
    1351 to 1358=> "010110001", 1359 to 1363=> "010110010", 1364 to 1371=> "010110011", 1372 to 1378=> "010110100", 
    1379 to 1385=> "010110101", 1386 to 1392=> "010110110", 1393 to 1405=> "010110111", 1406 to 1413=> "010111000", 
    1414 to 1424=> "010111001", 1425 to 1434=> "010111010", 1435 to 1446=> "010111011", 1447 to 1454=> "010111100", 
    1455 to 1465=> "010111101", 1466 to 1473=> "010111110", 1474 to 1481=> "010111111", 1482 to 1489=> "011000000", 
    1490 to 1499=> "011000001", 1500 to 1505=> "011000010", 1506 to 1510=> "011000011", 1511 to 1516=> "011000100", 
    1517 to 1522=> "011000101", 1523 to 1529=> "011000110", 1530 to 1535=> "011000111", 1536 to 1543=> "011001000", 
    1544 to 1550=> "011001001", 1551 to 1554=> "011001010", 1555 to 1562=> "011001011", 1563 to 1570=> "011001100", 
    1571 to 1578=> "011001101", 1579 to 1587=> "011001110", 1588 to 1596=> "011001111", 1597 to 1604=> "011010000", 
    1605 to 1613=> "011010001", 1614 to 1621=> "011010010", 1622 to 1629=> "011010011", 1630 to 1635=> "011010100", 
    1636 to 1642=> "011010101", 1643 to 1648=> "011010110", 1649 to 1656=> "011010111", 1657 to 1665=> "011011000", 
    1666 to 1672=> "011011001", 1673 to 1678=> "011011010", 1679 to 1686=> "011011011", 1687 to 1692=> "011011100", 
    1693 to 1701=> "011011101", 1702 to 1709=> "011011110", 1710 to 1717=> "011011111", 1718 to 1724=> "011100000", 
    1725 to 1733=> "011100001", 1734 to 1740=> "011100010", 1741 to 1749=> "011100011", 1750 to 1757=> "011100100", 
    1758 to 1764=> "011100101", 1765 to 1774=> "011100110", 1775 to 1781=> "011100111", 1782 to 1787=> "011101000", 
    1788 to 1796=> "011101001", 1797 to 1802=> "011101010", 1803 to 1810=> "011101011", 1811 to 1819=> "011101100", 
    1820 to 1827=> "011101101", 1828 to 1836=> "011101110", 1837 to 1844=> "011101111", 1845 to 1852=> "011110000", 
    1853 to 1860=> "011110001", 1861 to 1869=> "011110010", 1870 to 1874=> "011110011", 1875 to 1881=> "011110100", 
    1882 to 1890=> "011110101", 1891 to 1898=> "011110110", 1899 to 1907=> "011110111", 1908 to 1915=> "011111000", 
    1916 to 1923=> "011111001", 1924 to 1932=> "011111010", 1933 to 1939=> "011111011", 1940 to 1944=> "011111100", 
    1945 to 1950=> "011111101", 1951 to 1958=> "011111110", 1959 to 1966=> "011111111", 1967 to 1974=> "100000000", 
    1975 to 1981=> "100000001", 1982 to 1989=> "100000010", 1990 to 1997=> "100000011", 1998 to 2004=> "100000100", 
    2005 to 2011=> "100000101", 2012 to 2016=> "100000110", 2017 to 2020=> "100000111", 2021 to 2025=> "100001000", 
    2026 to 2034=> "100001001", 2035 to 2040=> "100001010", 2041 to 2047=> "100001011", 2048 to 2055=> "100001100", 
    2056 to 2062=> "100001101", 2063 to 2067=> "100001110", 2068 to 2075=> "100001111", 2076 to 2080=> "100010000", 
    2081 to 2087=> "100010001", 2088 to 2096=> "100010010", 2097 to 2103=> "100010011", 2104 to 2109=> "100010100", 
    2110 to 2115=> "100010101", 2116 to 2122=> "100010110", 2123 to 2130=> "100010111", 2131 to 2135=> "100011000", 
    2136 to 2144=> "100011001", 2145 to 2150=> "100011010", 2151 to 2155=> "100011011", 2156 to 2161=> "100011100", 
    2162 to 2167=> "100011101", 2168 to 2173=> "100011110", 2174 to 2179=> "100011111", 2180 to 2185=> "100100000", 
    2186 to 2192=> "100100001", 2193 to 2198=> "100100010", 2199 to 2202=> "100100011", 2203 to 2207=> "100100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity sparse_mat_col is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 2208;
        AddressWidth : INTEGER := 12);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of sparse_mat_col is
    component sparse_mat_col_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    sparse_mat_col_rom_U :  component sparse_mat_col_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


